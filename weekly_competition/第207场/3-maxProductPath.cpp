/*
* @Author: wilson_t
* @Date:   2020-09-21 23:08:46
* @Last Modified by:   wilson_t
* @Last Modified time: 2020-09-22 11:37:11
*/
/*********************************************************
* 题目[中等]：
给你一个大小为 rows x cols 的矩阵 grid 。最初，你位于左上角 (0, 0) ，每一步，你可以在矩阵中 向右 或 向下 移动。
在从左上角 (0, 0) 开始到右下角 (rows - 1, cols - 1) 结束的所有路径中，
找出具有 最大非负积 的路径。路径的积是沿路径访问的单元格中所有整数的乘积。
返回 最大非负积 对 109 + 7 取余 的结果。如果最大积为负数，则返回 -1 。
注意，取余是在得到最大积之后执行的。

示例 1：
输入：grid = [[-1,-2,-3],
             [-2,-3,-3],
             [-3,-3,-2]]
输出：-1
解释：从 (0, 0) 到 (2, 2) 的路径中无法得到非负积，所以返回 -1

示例 2：
输入：grid = [[1,-2,1],
             [1,-2,1],
             [3,-4,1]]
输出：8
解释：最大非负积对应的路径已经用粗体标出 (1 * 1 * -2 * -4 * 1 = 8)

示例 3：
输入：grid = [[1, 3],
             [0,-4]]
输出：0
解释：最大非负积对应的路径已经用粗体标出 (1 * 0 * -4 = 0)

示例 4：
输入：grid = [[ 1, 4,4,0],
             [-2, 0,0,1],
             [ 1,-1,1,1]]
输出：2
解释：最大非负积对应的路径已经用粗体标出 (1 * -2 * 1 * -1 * 1 * 1 = 2)
 
提示：
1 <= rows, cols <= 15
-4 <= grid[i][j] <= 4
*********************************************************/
const int MOD = 1e9 + 7;
long long f[20][20], g[20][20];
class Solution {
public:
    int maxProductPath(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        f[0][0] = g[0][0] = grid[0][0];
        for(int i = 1; i < m; ++i) {
            f[i][0] = max(f[i - 1][0] * grid[i][0], g[i - 1][0] * grid[i][0]);
            g[i][0] = min(f[i - 1][0] * grid[i][0], g[i - 1][0] * grid[i][0]);
        }
        for(int j = 1; j < n; ++j) {
            f[0][j] = max(f[0][j - 1] * grid[0][j], g[0][j - 1] * grid[0][j]);
            g[0][j] = min(f[0][j - 1] * grid[0][j], g[0][j - 1] * grid[0][j]);
        }
        for(int i = 1; i < m; ++i) {
            for(int j = 1; j < n; ++j) {
                if(grid[i][j] > 0) {
                    f[i][j] = max(f[i - 1][j], f[i][j - 1]) * grid[i][j];
                    g[i][j] = min(g[i - 1][j], g[i][j - 1]) * grid[i][j];
                } else {
                    f[i][j] = min(g[i - 1][j], g[i][j - 1]) * grid[i][j];
                    g[i][j] = max(f[i - 1][j], f[i][j - 1]) * grid[i][j];
                }
            }
        }
        // cout << g[m-1][n-1] << endl;
        return f[m - 1][n - 1] >= 0 ? f[m - 1][n - 1] % MOD : -1;
    }
};